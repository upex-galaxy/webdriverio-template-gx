name: 🧪 Smoke Test Pipeline
run-name: ${{github.actor}}🧪 triggered Smoke Test in ${{github.ref_name}}
#* This Pipeline "Smoke" is perfect to verify the App all components are working as expected after new deployments and releases.
on:
  #* automatically triggered when the PR is created in order to provide checks to approve:
  pull_request:
    branches:
    - main

  #* automatically triggered again when new changes are merged into main branch:
  push:
    branches:
    - main

  #* manual trigger:
  workflow_dispatch:
    inputs:
      environment:
        description: 🚀Select the Test Environment
        required: true
        default: 'QA'
        type: choice
        options: #? Orden por Deployments...
        - dev #? donde los developers work
        - sandbox #? donde los QA realizan smoke y exploratory testing.
        - QA #? donde los QA realizan smoke, sanity y regression testing.
        - staging #? donde los QA realizan smoke, sanity o regression testing.
        - beta #? donde los beta testers realizan acceptance testing.
        - prod #? donde los usuarios finales usan la App.

jobs:
  SmokeTest:
    timeout-minutes: 60
    runs-on: ubuntu-22.04
    #? environment: Se usa para definir un entorno de despliegue y puede incluir políticas de protección y secretos específicos del entorno.
    #? env: Se usa para definir variables de entorno que estarán disponibles para todos los pasos dentro del job.
    environment:
      name: ${{ github.event.inputs.environment }}
    env:
      TEST_ENV: ${{ github.event.inputs.environment }}
      REPLAY_API_KEY: ${{ secrets.REPLAY_API_KEY }}

    steps:
    - name: 📘 Checkout Repo
      uses: actions/checkout@v4

    - name: 💽 Installing Node.js v20
      uses: actions/setup-node@v4
      with:
        node-version: 20

    - name: 🍙 Bun Setup
      uses: oven-sh/setup-bun@v2
      with:
        bun-version: latest

    - name: 🧬 Install Project Dependencies
      run: bun install

    - name: 🧬 Install Replay Chromium
      run: npx replayio install

    - name: 🧪 Run Webdriverio Smoke Tests
      run: |
        bun run ci:suite sanityExample

    - name: 🎬️ Upload Replayio Recordings
      run: |
        npx replayio list
        npx replayio upload --all

    - name: 📡 Upload Artifact - EVIDENCE of Failing Tests
      if: failure() #? will only run if the tests fail because the screenshots are only taken when the tests fail.
      uses: actions/upload-artifact@v4
      with:
        name: test-failures-evidence
        path: test/screenshots
        retention-days: 15

    - name: 📡 Upload Artifact - Log Reports
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: smoke-allure-report
        path: reports
        retention-days: 15

    #* ------------------------------------ Allure Report Build ------------------------------------
    # - name: 📊 Get Allure Report History
    #   uses: actions/checkout@v4
    #   if: always()
    #   continue-on-error: true
    #   with:
    #     ref: gh-pages #? the branch used for the GitHub Pages content.
    #     path: gh-pages #? this is the directory where the previous allure reports were stored. #? In this case, the path gh-pages means the root of the repository.

    # - name: 📊 Build Allure Report
    #   uses: simple-elf/allure-report-action@master
    #   if: always()
    #   with:
    #     gh_pages: gh-pages/smoke #? the directory of checkout branch (gh-pages) where the previous allure data will be copied.
    #     #? this copied data will be combined with the actual allure-report data and generate the allure-history data.
    #     subfolder: smoke #? the subfolder where the deployed data (allure-history) will be placed. 
    #     #? If destination_dir is not specified, this subfolder will be saved to the root of the branch. 
    #     #? Note About the subfolder: Use this if you want to split the reports as different types (i.g smoke, regression, smoke, etc) 
    #     allure_results: reports/allure-results #? path of the actual allure-results generated by the tests.
    #     allure_report: allure-report #? path of the allure-report generated by the tests to be combined with the previous data.
    #     allure_history: allure-history #? path of the allure-history to be generated by the action.
    #     keep_reports: 15 #? the number of reports to keep in the allure-history.


    # - name: 🚀 Deploy Allure Report to GitHub Pages
    #   if: always()
    #   uses: peaceiris/actions-gh-pages@v4
    #   with:
    #     github_token: ${{ secrets.GITHUB_TOKEN }}
    #     publish_branch: gh-pages #? the branch used for the GitHub Pages content.
    #     # destination_dir: staging #? this is the directory inside the gh-pages branch where the allure-history will be saved.
    #     #? Note: If you use a destination_dir i.g 'staging' AND provide a subfolder i.g 'smoke' in the Build Allure Report step,
    #     #? the allure-history will be published on the 'staging/smoke' directory.
    #     publish_dir: allure-history #? the directory to be published. Must be the same as the allure_history value from the Build Allure Report step
    #     keep_files: true #? this is required to work properly with the subfolder option in the Build Allure Report step.
    #* -----------------------------------------------------------------------

  # Ari-Slack-Notification:
  #   needs: [RegressionTesting]
  #   if: always() #? will always run after the RegressionTesting job
  #   runs-on: ubuntu-latest
  #   steps:
  #   - name: 🔔Slack Notification
  #     if: env.SLACK_WEBHOOK != '' #? will only run if the SLACK_WEBHOOK secret is provided
  #     uses: rtCamp/action-slack-notify@v2
  #     env:
  #       SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
  #       SLACK_USERNAME: Ari✨
  #       SLACK_MESSAGE: ':test_tube: (${{ github.repository }}): ${{ github.actor }}🧪 triggered Smoke Test and got Status ${{ job.status }} :rocket:'
  #       SLACK_COLOR: ${{ job.status }}
  #       SLACK_ICON: https://image.cdn2.seaart.ai/2023-12-06/clo9g0h4msbc73ac2sog/99e1abc36f32945cd4bacf5ee7448e96194545f7_high.webp

