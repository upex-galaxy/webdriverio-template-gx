#*🧙🏻‍♂️ Ahora puedes usar este PIPELINE directamente desde GitHub Actions!
#! NO NECESITAS MODIFICAR NADA de este archivo...
#*🚀 Solo necesitas configurar las variables de entorno, keys de Jira y tu ruta de archivo de prueba a ejecutar en el Panel "Run workflow" de GitHub Actions
#? 🧪 Este PIPELINE ejecutará tus pruebas y subirá los resultados a Jira XRay
name: 🧪 UPEX CI/CD SanityTest Pipeline
run-name: ${{github.actor}}👨🏻‍🔬 triggered SanityTest in ${{github.ref_name}}
on:

  #* manual trigger:
  workflow_dispatch:
    inputs:
      system:
        description: 🚀Select the OS
        required: true
        default: 'ubuntu-latest'
        type: choice
        options:
        - ubuntu-latest
        - ubuntu-22.04
        - macos-latest
        - windows-latest
      environment:
        description: 🚀Select the Test Environment
        required: true
        default: 'QA'
        type: choice
        options: #? Orden de Deployments...
        - dev #? donde los developers work
        - sandbox #? donde los QA realizan smoke y exploratory testing.
        - QA #? donde los QA realizan smoke, sanity y regression testing.
        - staging #? donde los QA realizan smoke, sanity o regression testing.
        - uat #? donde los beta testers realizan acceptance testing.
        - prod #? donde los usuarios finales usan la App.
      test_run:
        description: 🚀Select the Test Suite to Run
        required: true
        default: 'test/specs/another.e2e.ts' #! No modificar, esto es solo un ejemplo.
        type: string
      xray_tx:
        description: 🚀Enter the Test Execution ID
        required: true
        default: 'GX3-1526' #! No modificar, esto es solo un ejemplo.
        type: string
      xray_project:
        description: 🚀Select the Project Key
        required: true
        default: 'GX3' #! No modificar, esto es solo un ejemplo.
        type: choice
        options:
        - GX1
        - GX2
        - GX3
        - GX4

jobs:
  SanityTest:
    #? El Pipeline "Sanity" es una estrategia de prueba perfecta para verificar que un Módulo entero de la App o una funcionalidad específica funcionen como se espera. Se puede realizar pruebas de cualquier nivel (Unit, Integration, E2E) para esta estrategia de pruebas. También se usa como "Story Testing" para ejecuciones de pruebas de cobertura de US (importar resultados a Jira XRay).
    runs-on: ${{ github.event.inputs.system }}
    environment:
      name: ${{ github.event.inputs.environment }}
    env:
      TEST_ENV: ${{ github.event.inputs.environment }}

    steps:
    - name: 📘 Checkout Repo
      uses: actions/checkout@v4

    - name: 💽 Installing Node.js v20
      uses: actions/setup-node@v4
      with:
        node-version: 20

    - name: 🍙 Bun Setup
      uses: oven-sh/setup-bun@v2
      with:
        bun-version: latest

    - name: 🧬 Install Project Dependencies
      run: bun install

    - name: 🔎 Check Typescript Code
      run: | #? Corre el linter de TypeScript para verificar errores de sintaxis.
        bun run check:ts

    - name: 🧪 Run Webdriverio selected SanityTest
      run: |
        bun run ci:spec ${{ github.event.inputs.test_run }}

    - name: 📡 Upload Artifact - EVIDENCE of Failing Tests
      if: failure() #? will only run if the tests fail because the screenshots are only taken when the tests fail.
      uses: actions/upload-artifact@v4
      with:
        name: test-failures-evidence
        path: test/screenshots
        retention-days: 15

    - name: 📡 Upload Artifact - Log Reports
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: log-reports
        path: reports
        retention-days: 15

    - name: ✅ Import Test Results to Xray
      if: always()
      uses: mikepenz/xray-action@v3
      with: #OPCIONES PARA IMPORTAR LOS RESULTADOS DE PRUEBA A JIRA XRAY:
        username: ${{ secrets.XRAY_CLIENT_ID}}
        password: ${{ secrets.XRAY_CLIENT_SECRET}}
        testFormat: 'junit' #! NO CAMBIAR
        testPaths: 'reports/junit-results/wdio-junit-test-reporter.xml' #! NO CAMBIAR
        testExecKey: ${{ github.event.inputs.xray_tx }} #! NO CAMBIAR
        projectKey: ${{ github.event.inputs.xray_project }} #! NO CAMBIAR

    #* ------- Allure Report Build -------
    - name: 📊 Get Allure Report History
      uses: actions/checkout@v4
      if: always()
      continue-on-error: true
      with:
        ref: gh-pages #? the branch used for the GitHub Pages content.
        path: gh-pages #? this is the directory where the previous allure reports were stored. #? In this case, the path gh-pages means the root of the repository.

    - name: 📊 Build Allure Report
      uses: simple-elf/allure-report-action@master
      if: always()
      with:
        gh_pages: gh-pages #? the directory of checkout branch (gh-pages) where the previous allure data will be copied.
        #? this copied data will be combined with the actual allure-report data and generate the allure-history data.
        subfolder: sanity/${{ github.event.inputs.xray_tx }} #? the subfolder where the deployed data (allure-history) will be placed. In this example, the subfolder is the Test Execution ID insde the sanity endpoint.
        #? If destination_dir is not specified, this subfolder will be saved to the root of the branch. 
        #? Note: About the subfolder: Use this if you want to split the reports as different types (i.g smoke, regression, smoke, etc) 
        allure_results: reports/allure-results #? path of the actual allure-results generated by the tests.
        allure_report: allure-report #? path of the allure-report generated by the tests to be combined with the previous data.
        allure_history: allure-history #? path of the allure-history to be generated by the action.
        keep_reports: 15 #? the number of reports to keep in the allure-history.


    - name: 🚀 Deploy Allure Report to GitHub Pages
      if: always()
      uses: peaceiris/actions-gh-pages@v4
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_branch: gh-pages #? the branch used for the GitHub Pages content.
        # destination_dir: ${{ github.event.inputs.environment }} #? this is the directory inside the gh-pages branch where the allure-history will be saved.
        #? Note: If you use a destination_dir i.g 'staging' AND provide a subfolder i.g 'smoke' in the Build Allure Report step, the allure-history will be published on the 'staging/smoke' directory.
        publish_dir: allure-history #? the directory to be published. Must be the same as the allure_history value from the Build Allure Report step
        keep_files: true #? this is required to work properly with the subfolder option in the Build Allure Report step.
        #* -----------------------------------------------------------------------

  Ari-Slack-Notification:
    needs: [SanityTest]
    if: always() #? will always run after the SanityTest job
    runs-on: ubuntu-latest
    steps:
    - name: 🔔 Slack Notification
      uses: rtCamp/action-slack-notify@v2
      env:
        SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
        SLACK_USERNAME: Ari✨
        SLACK_MESSAGE: '🧪(${{ github.repository }}): ${{ github.actor }} triggered SanityTest🚀'
        SLACK_COLOR: ${{ job.status }}
        SLACK_ICON: ${{ secrets.ARI_PROFILE }}

